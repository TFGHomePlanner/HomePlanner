datasource db {
  provider = "mysql"
  url      = "mysql://HomePlannerDB:HomePlanner_RDS@homeplannerdb.cwnyeyokykn2.eu-north-1.rds.amazonaws.com:3306/homeplannerdb"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                           String           @id @default(cuid())
  name                         String
  email                        String           @unique
  emailVerified                DateTime?
  passwordHash                 String
  accounts                     Account[]
  sessions                     Session[]
  adminGroup                   Group[]          @relation("UserAdmin")
  groups                       Group[]          @relation("Users")
  message                      Message[]
  imageprofile                 String?
  Task                         Task[]
  Notes                        Note[]
  SharedNote                   SharedNote[]
  Payment                      Payment[]
  DebtorUser                   DebtorUser[]
  paymentSectionsAsParticipant PaymentSection[] @relation("PaymentSectionParticipants")
  Event                        Event[]
  Reservation                  Reservation[]
}

model Group {
  id                 String               @id @default(cuid())
  name               String
  codeGroup          String               @unique
  admin              User                 @relation("UserAdmin", fields: [adminId], references: [id])
  adminId            String
  description        String?
  users              User[]               @relation("Users")
  messages           Message[]
  lists              List[]
  Task               Task[]
  favouritesProducts FavouritesProducts[]
  TaskGroup          TaskGroup[]
  SharedNote         SharedNote[]
  PaymentSetion      PaymentSection[]
  Calendar           Calendar[]
  Event              Event[]
  Reservation        Reservation[]

  @@index([adminId])
}

model Message {
  id      String   @id @default(cuid())
  text    String
  day     DateTime
  userId  String
  group   Group    @relation(fields: [groupId], references: [id])
  groupId String
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([groupId])
}

model List {
  id          String    @id @default(cuid())
  name        String
  description String
  imageURl  String?
  isClosed    Boolean
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     String
  items       Product[]
  creatorId   String
  isPublic    Boolean

  @@index([groupId])
}

model FavouritesProducts {
  id      String @id @default(cuid())
  name    String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@index([groupId])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  isPurchased Boolean @default(false)
  listName    List    @relation(fields: [listId], references: [id])
  listId      String

  @@index([listId])
}

model Task {
  id            String     @id @default(cuid())
  name          String
  description   String?
  frequency     Frequency
  isDone        Boolean    @default(false)
  createdAt     DateTime   @default(now())
  startsAt      DateTime?
  assignedTo    User?      @relation(fields: [userId], references: [id])
  createdBy     String
  addToCalendar Boolean    @default(false)
  group         Group      @relation(fields: [groupId], references: [id])
  groupId       String
  userId        String?
  TaskGroup     TaskGroup? @relation(fields: [taskGroupId], references: [id])
  taskGroupId   String?

  @@index([groupId, userId])
}

model TaskGroup {
  id      String @id @default(cuid())
  name    String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
  Tasks   Task[]

  @@index([groupId])
}

model Event {
  id         String    @id @default(cuid())
  name       String
  isEvent    Boolean
  location   String?
  allDay     Boolean
  startsAt   DateTime
  endsAt     DateTime?
  calendar   Calendar? @relation(fields: [calendarId], references: [id])
  calendarId String?
  notes      String?
  group      Group     @relation(fields: [groupId], references: [id])
  groupId    String
  createdBy  User      @relation(fields: [userId], references: [id])
  userId     String

  @@index([groupId])
}

model Reservation {
  id          String   @id @default(cuid())
  room        String
  description String
  allDay      Boolean
  date        DateTime
  notes       String?
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([groupId])
}

model Calendar {
  id      String  @id @default(cuid())
  name    String
  group   Group   @relation(fields: [groupId], references: [id])
  groupId String
  Events  Event[]
}

model Note {
  id        String   @id @default(cuid())
  title     String
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model SharedNote {
  id        String   @id @default(cuid())
  title     String
  text      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String

  @@index([userId])
}

model PaymentSection {
  id           String    @id @default(cuid())
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      String
  isClosed     Boolean   @default(false)
  title        String
  totalAmount  Float
  description  String
  payments     Payment[]
  createdAt    DateTime  @default(now())
  participants User[]    @relation("PaymentSectionParticipants")

  @@index([groupId])
}

model Payment {
  id               String         @id @default(cuid())
  title            String?
  section          PaymentSection @relation(fields: [paymentSectionId], references: [id])
  paymentSectionId String
  payingUser       User           @relation(fields: [payingUserId], references: [id])
  payingUserId     String
  amount           Float
  debtorUsers      DebtorUser[]
  createdAt        DateTime       @default(now())

  @@index([paymentSectionId, payingUserId])
}

model DebtorUser {
  id        String  @id @default(cuid())
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String
  debtor    User    @relation(fields: [debtorId], references: [id])
  debtorId  String
  amount    Float

  @@index([paymentId, debtorId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Frequency {
  never
  oncePerDay
  oncePerWeek
  oncePerMonth
}
