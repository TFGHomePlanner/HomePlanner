datasource db {
  provider = "mysql"
  url      = "mysql://HomePlannerDB:HomePlanner_RDS@homeplannerdb.cwnyeyokykn2.eu-north-1.rds.amazonaws.com:3306/homeplannerdb"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  accounts      Account[]
  sessions      Session[]
  adminGroup    Group[]   @relation("UserAdmin")
  groups        Group[]   @relation("Users")
  message       Message[]
  imageprofile  String?
  Task          Task[]
  Notes         Note[]
}

model Group {
  id                 String               @id @default(cuid())
  name               String
  codeGroup          String               @unique
  admin              User                 @relation("UserAdmin", fields: [adminId], references: [id])
  adminId            String
  description        String?
  users              User[]               @relation("Users")
  messages           Message[]
  lists              List[]
  Task               Task[]
  favouritesProducts FavouritesProducts[]

  @@index([adminId])
}

model Message {
  id      String   @id @default(cuid())
  text    String
  day     DateTime
  userId  String
  group   Group    @relation(fields: [groupId], references: [id])
  groupId String
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([groupId])
}

model List {
  id          String    @id @default(cuid())
  name        String
  description String
  isClosed    Boolean
  group       Group     @relation(fields: [groupId], references: [id])
  groupId     String
  items       Product[]
  creatorId   String
  isPublic    Boolean    

  @@index([groupId])
}

model FavouritesProducts {
  id      String @id @default(cuid())
  name    String
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  @@index([groupId])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  isPurchased Boolean @default(false)
  listName    List    @relation(fields: [listId], references: [id])
  listId      String

  @@index([listId])
}

model Task {
  id          String      @id @default(cuid())
  name        String
  description String?
  frequency   Frequency
  isDone      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  assignedTo  User?       @relation(fields: [userId], references: [id])
  group       Group       @relation(fields: [groupId], references: [id])
  groupId     String
  groupTask   GroupTask[]
  userId      String?

  @@index([groupId])
}

model TaskGroup {
  id        String      @id @default(cuid())
  name      String
  groupTask GroupTask[]
}

model GroupTask {
  groupId   String
  taskGroup TaskGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  taskId    String
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([groupId, taskId])
  @@index([groupId])
}

model Note {
  id        String   @id @default(cuid())
  title     String
  text      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Frequency {
  never
  oncePerDay
  oncePerWeek
  oncePerMonth
}
